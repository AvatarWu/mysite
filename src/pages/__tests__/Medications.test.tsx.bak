import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import Medications from '../Medications';

// Mock axios
jest.mock('axios', () => ({
  get: jest.fn(),
  delete: jest.fn()
}));

// Mock localStorage
const mockLocalStorage = {
  getItem: jest.fn().mockReturnValue('test-token'),
  setItem: jest.fn(),
  removeItem: jest.fn()
};
Object.defineProperty(window, 'localStorage', { value: mockLocalStorage });

// Mock react-router-dom
jest.mock('react-router-dom', () => ({
  BrowserRouter: ({ children }: any) => <div>{children}</div>,
  useNavigate: () => jest.fn()
}));

// Mock @ionic/react
jest.mock('@ionic/react', () => ({
  IonContent: ({ children }: any) => <div>{children}</div>,
  IonHeader: ({ children }: any) => <div>{children}</div>,
  IonToolbar: ({ children }: any) => <div>{children}</div>,
  IonTitle: ({ children }: any) => <div>{children}</div>,
  IonItem: ({ children }: any) => <div>{children}</div>,
  IonLabel: ({ children }: any) => <div>{children}</div>,
  IonButton: ({ children, onClick }: any) => (
    <button onClick={onClick}>{children}</button>
  ),
  IonToast: ({ isOpen, message, onDidDismiss }: any) => (
    isOpen ? <div data-testid="toast">{message}</div> : null
  )
}));

describe('Medications Component', () => {
  const mockGet = jest.fn();
  const mockDelete = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    mockGet.mockResolvedValue({
      data: {
        medications: [
          { id: 1, name: 'Test Medication', dosage: '1 pill', timeSlots: [] }
        ]
      }
    });
    mockDelete.mockResolvedValue({ data: { success: true } });
    
    // 重新設定 axios mock
    const axios = require('axios');
    axios.get.mockImplementation(mockGet);
    axios.delete.mockImplementation(mockDelete);
  });

  it('renders medications list', async () => {
    render(
      <BrowserRouter>
        <Medications />
      </BrowserRouter>
    );

    await waitFor(() => {
      expect(screen.getByText(/用藥管理/i)).toBeInTheDocument();
    });
  });

  it('handles delete medication', async () => {
    render(
      <BrowserRouter>
        <Medications />
      </BrowserRouter>
    );

    await waitFor(() => {
      expect(screen.getByText(/用藥管理/i)).toBeInTheDocument();
    });

    // 查找刪除按鈕並點擊
    const deleteButtons = screen.getAllByRole('button');
    const deleteButton = deleteButtons.find(button => 
      button.textContent?.includes('刪除') || button.textContent?.includes('Delete')
    );
    
    if (deleteButton) {
      fireEvent.click(deleteButton);
      
      await waitFor(() => {
        expect(mockDelete).toHaveBeenCalled();
      });
    }
  });

  it('displays add medication button', async () => {
    render(
      <BrowserRouter>
        <Medications />
      </BrowserRouter>
    );

    await waitFor(() => {
      const addButton = screen.getByRole('button', { name: /新增用藥/i });
      expect(addButton).toBeInTheDocument();
    });
  });
}); 