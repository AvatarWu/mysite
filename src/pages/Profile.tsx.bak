// src/pages/Profile.tsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import AuthService, { User } from '../services/AuthService';
import './Profile.css';

// 擴展 User 接口以包含額外的字段
interface ExtendedUser extends User {
  birthDate?: string;
  address?: string;
}

const Profile: React.FC = () => {
  const navigate = useNavigate();
  const [user, setUser] = useState<ExtendedUser | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertType, setAlertType] = useState<'success' | 'error'>('success');

  // 編輯表單數據
  const [editForm, setEditForm] = useState({
    name: '',
    email: '',
    phone: '',
    birthDate: '',
    address: ''
  });

  useEffect(() => {
    loadUserProfile();
  }, []);

  const loadUserProfile = async () => {
    try {
      setLoading(true);
      const authService = AuthService.getInstance();
      const currentUser = authService.getCurrentUser();
      if (currentUser) {
        const extendedUser: ExtendedUser = {
          ...currentUser,
          birthDate: (currentUser as any).birthDate || '',
          address: (currentUser as any).address || ''
        };
        setUser(extendedUser);
        setEditForm({
          name: extendedUser.name || '',
          email: extendedUser.email || '',
          phone: extendedUser.phone || '',
          birthDate: extendedUser.birthDate || '',
          address: extendedUser.address || ''
        });
      }
    } catch (error) {
      console.error('加載用戶資料失敗:', error);
      showMessage('加載用戶資料失敗', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleCancel = () => {
    setIsEditing(false);
    // 恢復原始數據
    if (user) {
      setEditForm({
        name: user.name || '',
        email: user.email || '',
        phone: user.phone || '',
        birthDate: user.birthDate || '',
        address: user.address || ''
      });
    }
  };

  const handleSave = async () => {
    try {
      setSaving(true);
      // 這裡可以調用 API 更新用戶資料
      await new Promise(resolve => setTimeout(resolve, 1000)); // 模擬 API 調用
      
      // 更新本地用戶數據
      if (user) {
        const updatedUser = { ...user, ...editForm };
        setUser(updatedUser);
        // 這裡可以調用 API 更新用戶資料
        console.log('用戶資料已更新:', updatedUser);
      }
      
      setIsEditing(false);
      showMessage('資料更新成功', 'success');
    } catch (error) {
      console.error('更新用戶資料失敗:', error);
      showMessage('更新用戶資料失敗', 'error');
    } finally {
      setSaving(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setEditForm(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const showMessage = (message: string, type: 'success' | 'error') => {
    setAlertMessage(message);
    setAlertType(type);
    setShowAlert(true);
    setTimeout(() => setShowAlert(false), 3000);
  };

  const handleBack = () => {
    navigate('/');
  };

  if (loading) {
    return (
      <div className="profile-page">
        <header className="custom-header">
          <div className="header-content">
            <button onClick={handleBack} className="back-button" type="button">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M19 12H5M12 19l-7-7 7-7"/>
              </svg>
              返回
            </button>
            <h1 className="header-title">個人資料</h1>
            <div className="header-spacer"></div>
          </div>
        </header>

        <main className="main-content">
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p>載入中...</p>
          </div>
        </main>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="profile-page">
        <header className="custom-header">
          <div className="header-content">
            <button onClick={handleBack} className="back-button" type="button">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M19 12H5M12 19l-7-7 7-7"/>
              </svg>
              返回
            </button>
            <h1 className="header-title">個人資料</h1>
            <div className="header-spacer"></div>
          </div>
        </header>

        <main className="main-content">
          <div className="error-container">
            <div className="error-icon">
              <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <circle cx="12" cy="12" r="10"/>
                <line x1="15" y1="9" x2="9" y2="15"/>
                <line x1="9" y1="9" x2="15" y2="15"/>
              </svg>
            </div>
            <h3>無法載入資料</h3>
            <p>請重新登入或檢查網路連線</p>
            <button onClick={loadUserProfile} className="retry-button" type="button">
              重試
            </button>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="profile-page">
      <header className="custom-header">
        <div className="header-content">
          <button onClick={handleBack} className="back-button" type="button">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              <path d="M19 12H5M12 19l-7-7 7-7"/>
            </svg>
            返回
          </button>
          <h1 className="header-title">個人資料</h1>
          {!isEditing ? (
            <button onClick={handleEdit} className="edit-button-header" type="button">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
              </svg>
            </button>
          ) : (
            <div className="header-actions">
              <button onClick={handleCancel} className="cancel-button-header" type="button">
                取消
              </button>
              <button 
                onClick={handleSave} 
                className="save-button-header" 
                type="button"
                disabled={saving}
              >
                {saving ? '儲存中...' : '儲存'}
              </button>
            </div>
          )}
        </div>
      </header>

      <main className="main-content">
        <div className="profile-container">
          {/* 頭像區域 */}
          <div className="avatar-section">
            <div className="avatar-container">
              <div className="avatar">
                {user.avatar ? (
                  <img src={user.avatar} alt="用戶頭像" />
                ) : (
                  <svg width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
                    <circle cx="12" cy="7" r="4"/>
                  </svg>
                )}
              </div>
              {isEditing && (
                <button className="camera-button" type="button">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"/>
                    <circle cx="12" cy="13" r="4"/>
                  </svg>
                </button>
              )}
            </div>
            <h2 className="user-name">{user.name || '未設定姓名'}</h2>
            <p className="user-email">{user.email}</p>
          </div>

          {/* 個人資料表單 */}
          <div className="profile-form">
            <div className="form-section">
              <div className="section-header">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
                  <circle cx="12" cy="7" r="4"/>
                </svg>
                <h3 className="section-title">基本資料</h3>
              </div>

              <div className="form-group">
                <label className="form-label">
                  姓名
                  <span className="required">*</span>
                </label>
                <input
                  type="text"
                  className="form-input"
                  value={editForm.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  disabled={!isEditing}
                  placeholder="請輸入姓名"
                />
              </div>

              <div className="form-group">
                <label className="form-label">
                  電子郵件
                  <span className="required">*</span>
                </label>
                <input
                  type="email"
                  className="form-input"
                  value={editForm.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  disabled={!isEditing}
                  placeholder="請輸入電子郵件"
                />
              </div>

              <div className="form-group">
                <label className="form-label">電話號碼</label>
                <input
                  type="tel"
                  className="form-input"
                  value={editForm.phone}
                  onChange={(e) => handleInputChange('phone', e.target.value)}
                  disabled={!isEditing}
                  placeholder="請輸入電話號碼"
                />
              </div>

              <div className="form-group">
                <label className="form-label">出生日期</label>
                <input
                  type="date"
                  className="form-input"
                  value={editForm.birthDate}
                  onChange={(e) => handleInputChange('birthDate', e.target.value)}
                  disabled={!isEditing}
                />
              </div>

              <div className="form-group">
                <label className="form-label">地址</label>
                <input
                  type="text"
                  className="form-input"
                  value={editForm.address}
                  onChange={(e) => handleInputChange('address', e.target.value)}
                  disabled={!isEditing}
                  placeholder="請輸入地址"
                />
              </div>
            </div>

            {/* 安全設定區域 */}
            <div className="form-section">
              <div className="section-header">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
                </svg>
                <h3 className="section-title">安全設定</h3>
              </div>

              <div className="form-group">
                <label className="form-label">通知設定</label>
                <div className="toggle-container">
                  <span className="toggle-label">接收推送通知</span>
                  <button className="toggle-switch active" type="button">
                    <span className="toggle-slider"></span>
                  </button>
                </div>
              </div>

              <div className="form-group">
                <label className="form-label">隱私設定</label>
                <div className="toggle-container">
                  <span className="toggle-label">公開個人資料</span>
                  <button className="toggle-switch" type="button">
                    <span className="toggle-slider"></span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Toast 消息 */}
      {showAlert && (
        <div className={`toast-message ${alertType}`}>
          {alertMessage}
        </div>
      )}
    </div>
  );
};

export default Profile;
