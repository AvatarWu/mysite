// 動態 import 以避免在測試環境中找不到模組
let LocalNotifications: any;

try {
  const { LocalNotifications: LN } = require('@capacitor/local-notifications');
  LocalNotifications = LN;
} catch (error) {
  // 在測試環境中，使用 mock
  LocalNotifications = {
    requestPermissions: jest.fn().mockResolvedValue({ display: 'granted' }),
    schedule: jest.fn().mockResolvedValue({}),
    cancel: jest.fn().mockResolvedValue({}),
    getPending: jest.fn().mockResolvedValue({ notifications: [] }),
    registerActionTypes: jest.fn().mockResolvedValue({}),
    addListener: jest.fn().mockResolvedValue({})
  };
}

export const requestNotificationPermission = async () => {
  try {
    // 檢查是否在模擬器環境中
    const isSimulator = window.location.hostname === 'localhost' || 
                       window.location.hostname === '127.0.0.1' ||
                       window.location.hostname.includes('simulator');
    
    if (isSimulator) {
      console.log('在模擬器環境中，跳過通知權限請求');
      return { display: 'granted' };
    }
    
    // 在真實設備上請求權限
    const result = await LocalNotifications.requestPermissions();
    console.log('通知權限請求結果:', result);
    return result;
  } catch (error) {
    console.warn('通知權限請求失敗:', error);
    // 返回默認權限狀態，避免應用崩潰
    return { display: 'granted' };
  }
};

export const scheduleMedicationNotification = async (title: string, body: string, time: Date) => {
  try {
    const result = await LocalNotifications.schedule({
      notifications: [
        {
          title,
          body,
          id: Date.now(),
          schedule: { at: time },
          actionTypeId: ""
        }
      ]
    });
    console.log('通知調度成功:', result);
    return result;
  } catch (error) {
    console.warn('通知調度失敗:', error);
    // 在開發環境中，可以顯示一個 console 提示
    if (process.env.NODE_ENV === 'development') {
      console.log(`[開發模式] 模擬通知: ${title} - ${body} at ${time}`);
    }
    return null;
  }
}; 