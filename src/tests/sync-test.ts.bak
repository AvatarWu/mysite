/**
 * 數據同步功能測試腳本
 * 在瀏覽器控制台中運行此腳本來測試同步功能
 */

// 擴展 Window 接口以包含我們的服務
declare global {
  interface Window {
    dataSyncService: any;
    healthDataService: any;
  }
}

// 測試數據
const testWeightRecord = {
  weight: 70.5,
  height: 170,
  bmi: 24.4,
  note: '測試記錄',
  date: new Date().toISOString().split('T')[0]
};

// 測試函數
export const runSyncTests = async () => {
  console.log('🚀 開始運行數據同步測試...');
  
  try {
    // 測試 1: 檢查服務是否可用
    console.log('\n📋 測試 1: 檢查服務可用性');
    if (typeof window !== 'undefined' && window.dataSyncService) {
      console.log('✅ 數據同步服務可用');
    } else {
      console.log('❌ 數據同步服務不可用');
      return;
    }

    // 測試 2: 添加體重記錄
    console.log('\n📋 測試 2: 添加體重記錄');
    try {
      const newRecord = await window.healthDataService.addWeightRecord(testWeightRecord);
      console.log('✅ 體重記錄添加成功:', newRecord);
    } catch (error) {
      console.log('❌ 體重記錄添加失敗:', error);
    }

    // 測試 3: 檢查同步狀態
    console.log('\n📋 測試 3: 檢查同步狀態');
    const syncStats = window.dataSyncService.getSyncStats();
    console.log('同步狀態:', syncStats);
    console.log('待同步變更數量:', window.dataSyncService.getPendingChangesCount());

    // 測試 4: 手動同步
    console.log('\n📋 測試 4: 手動同步');
    try {
      const syncResult = await window.dataSyncService.manualSync();
      console.log('✅ 手動同步完成:', syncResult);
    } catch (error) {
      console.log('❌ 手動同步失敗:', error);
    }

    // 測試 5: 檢查本地存儲
    console.log('\n📋 測試 5: 檢查本地存儲');
    const localData = localStorage.getItem('weightRecords');
    if (localData) {
      const records = JSON.parse(localData);
      console.log('本地體重記錄數量:', records.length);
      console.log('最新記錄:', records[0]);
    } else {
      console.log('❌ 本地沒有體重記錄');
    }

    // 測試 6: 檢查待同步變更
    console.log('\n📋 測試 6: 檢查待同步變更');
    const pendingCount = window.dataSyncService.getPendingChangesCount();
    console.log('待同步變更數量:', pendingCount);

    // 測試 7: 網絡狀態模擬
    console.log('\n📋 測試 7: 網絡狀態模擬');
    console.log('當前網絡狀態:', window.dataSyncService.getSyncStatus());

    console.log('\n🎉 所有測試完成！');
    
  } catch (error) {
    console.error('❌ 測試過程中發生錯誤:', error);
  }
};

// 清理測試數據
export const cleanupTestData = async () => {
  console.log('🧹 清理測試數據...');
  
  try {
    await window.healthDataService.clearAllLocalData();
    console.log('✅ 測試數據清理完成');
  } catch (error) {
    console.log('❌ 清理測試數據失敗:', error);
  }
};

// 性能測試
export const runPerformanceTest = async () => {
  console.log('⚡ 開始性能測試...');
  
  const startTime = performance.now();
  
  try {
    // 批量添加記錄
    const promises = [];
    for (let i = 0; i < 10; i++) {
      const record = {
        ...testWeightRecord,
        weight: 70 + Math.random() * 2,
        note: `性能測試記錄 ${i + 1}`
      };
      promises.push(window.healthDataService.addWeightRecord(record));
    }
    
    await Promise.all(promises);
    
    const endTime = performance.now();
    const duration = endTime - startTime;
    
    console.log(`✅ 批量添加 10 條記錄完成，耗時: ${duration.toFixed(2)}ms`);
    console.log(`平均每條記錄: ${(duration / 10).toFixed(2)}ms`);
    
  } catch (error) {
    console.log('❌ 性能測試失敗:', error);
  }
};

// 將測試函數添加到全局對象
if (typeof window !== 'undefined') {
  (window as any).runSyncTests = runSyncTests;
  (window as any).cleanupTestData = cleanupTestData;
  (window as any).runPerformanceTest = runPerformanceTest;
  
  console.log('🔧 測試函數已添加到全局對象:');
  console.log('- window.runSyncTests() - 運行同步測試');
  console.log('- window.cleanupTestData() - 清理測試數據');
  console.log('- window.runPerformanceTest() - 運行性能測試');
}

// 自動運行測試（可選）
if (process.env.NODE_ENV === 'development') {
  console.log('🔄 開發環境檢測到，準備自動運行測試...');
  // 延遲執行，確保服務已初始化
  setTimeout(() => {
    runSyncTests();
  }, 2000);
}
