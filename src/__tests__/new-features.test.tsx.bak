// 新功能模塊測試套件
import DataVisualizationService from '../services/DataVisualizationService';
import NotificationService from '../services/NotificationService';

// 模擬數據
const mockWeightRecords = [
  { date: '2024-01-01', weight: 65.0 },
  { date: '2024-01-02', weight: 64.8 },
  { date: '2024-01-03', weight: 64.5 },
  { date: '2024-01-04', weight: 64.2 },
  { date: '2024-01-05', weight: 64.0 }
];

const mockBloodPressureRecords = [
  { date: '2024-01-01', systolic: 120, diastolic: 80 },
  { date: '2024-01-02', systolic: 118, diastolic: 78 },
  { date: '2024-01-03', systolic: 122, diastolic: 82 },
  { date: '2024-01-04', systolic: 119, diastolic: 79 },
  { date: '2024-01-05', systolic: 121, diastolic: 81 }
];

const mockBloodSugarRecords = [
  { date: '2024-01-01', value: 5.2 },
  { date: '2024-01-02', value: 5.1 },
  { date: '2024-01-03', value: 5.3 },
  { date: '2024-01-04', value: 5.0 },
  { date: '2024-01-05', value: 5.2 }
];

const mockMedicationRecords = [
  { date: '2024-01-01', taken: true },
  { date: '2024-01-02', taken: true },
  { date: '2024-01-03', taken: false },
  { date: '2024-01-04', taken: true },
  { date: '2024-01-05', taken: true }
];

describe('CareOld 新功能模塊測試', () => {
  describe('數據可視化服務測試', () => {
    test('應該能夠生成體重圖表數據', () => {
      const chartData = DataVisualizationService.generateWeightChartData(mockWeightRecords);
      
      expect(chartData).toBeDefined();
      expect(chartData.labels).toHaveLength(5);
      expect(chartData.datasets).toHaveLength(1);
      expect(chartData.datasets[0].data).toEqual([65.0, 64.8, 64.5, 64.2, 64.0]);
    });

    test('應該能夠生成血壓圖表數據', () => {
      const chartData = DataVisualizationService.generateBloodPressureChartData(mockBloodPressureRecords);
      
      expect(chartData).toBeDefined();
      expect(chartData.labels).toHaveLength(5);
      expect(chartData.datasets).toHaveLength(2);
      expect(chartData.datasets[0].label).toBe('收縮壓 (mmHg)');
      expect(chartData.datasets[1].label).toBe('舒張壓 (mmHg)');
    });

    test('應該能夠生成血糖圖表數據', () => {
      const chartData = DataVisualizationService.generateBloodSugarChartData(mockBloodSugarRecords);
      
      expect(chartData).toBeDefined();
      expect(chartData.labels).toHaveLength(5);
      expect(chartData.datasets).toHaveLength(1);
      expect(chartData.datasets[0].data).toEqual([5.2, 5.1, 5.3, 5.0, 5.2]);
    });

    test('應該能夠生成用藥依從性圖表數據', () => {
      const chartData = DataVisualizationService.generateMedicationAdherenceData(mockMedicationRecords);
      
      expect(chartData).toBeDefined();
      expect(chartData.labels).toHaveLength(5);
      expect(chartData.datasets).toHaveLength(1);
      expect(chartData.datasets[0].data).toEqual([100, 100, 0, 100, 100]);
    });

    test('應該能夠計算趨勢數據', () => {
      const weightTrend = DataVisualizationService.calculateTrend(mockWeightRecords, 'weight');
      
      expect(weightTrend).toBeDefined();
      expect(weightTrend.trend).toBe('down');
      expect(weightTrend.change).toBeCloseTo(1.0, 1);
      expect(weightTrend.period).toBe('7天');
    });

    test('應該能夠生成健康指標摘要', () => {
      const metrics = DataVisualizationService.generateHealthMetrics(
        mockWeightRecords,
        mockBloodPressureRecords,
        mockBloodSugarRecords,
        mockMedicationRecords
      );
      
      expect(metrics).toBeDefined();
      expect(metrics.weight.current).toBe(65.0);
      expect(metrics.bloodPressure.systolic.current).toBe(121);
      expect(metrics.bloodSugar.current).toBe(5.2);
      expect(metrics.medications.adherence).toBe(80);
    });

    test('應該能夠生成健康評分', () => {
      const metrics = DataVisualizationService.generateHealthMetrics(
        mockWeightRecords,
        mockBloodPressureRecords,
        mockBloodSugarRecords,
        mockMedicationRecords
      );
      
      const score = DataVisualizationService.generateHealthScore(metrics);
      
      expect(score).toBeGreaterThan(0);
      expect(score).toBeLessThanOrEqual(100);
    });

    test('應該能夠生成健康建議', () => {
      const metrics = DataVisualizationService.generateHealthMetrics(
        mockWeightRecords,
        mockBloodPressureRecords,
        mockBloodSugarRecords,
        mockMedicationRecords
      );
      
      const advice = DataVisualizationService.generateHealthAdvice(metrics);
      
      expect(Array.isArray(advice)).toBe(true);
      expect(advice.length).toBeGreaterThan(0);
    });
  });

  describe('通知服務測試', () => {
    test('應該能夠獲取通知設置', () => {
      const settings = NotificationService.getSettings();
      
      expect(settings).toBeDefined();
      expect(settings.enabled).toBeDefined();
      expect(settings.medicationReminders).toBeDefined();
      expect(settings.healthCheckReminders).toBeDefined();
      expect(settings.appointmentReminders).toBeDefined();
    });

    test('應該能夠獲取通知歷史', () => {
      const history = NotificationService.getNotificationHistory();
      
      expect(Array.isArray(history)).toBe(true);
    });

    test('應該能夠檢查通知權限', async () => {
      const hasPermission = await NotificationService.checkPermissions();
      
      expect(typeof hasPermission).toBe('boolean');
    });

    test('應該能夠發送用藥提醒', async () => {
      const notificationId = await NotificationService.sendMedicationReminder('阿司匹林', '09:00');
      
      expect(typeof notificationId).toBe('number');
    });

    test('應該能夠發送健康檢查提醒', async () => {
      const notificationId = await NotificationService.sendHealthCheckReminder('血壓檢查');
      
      expect(typeof notificationId).toBe('number');
    });

    test('應該能夠發送預約提醒', async () => {
      const notificationId = await NotificationService.sendAppointmentReminder('醫生預約', '14:30');
      
      expect(typeof notificationId).toBe('number');
    });

    test('應該能夠發送自定義通知', async () => {
      const notificationId = await NotificationService.sendNotification({
        title: '測試通知',
        body: '這是一個測試通知',
        data: { type: 'test' }
      });
      
      expect(typeof notificationId).toBe('number');
    });

    test('應該能夠獲取待處理通知', async () => {
      const pending = await NotificationService.getPendingNotifications();
      
      expect(Array.isArray(pending)).toBe(true);
    });

    test('應該能夠標記通知為已讀', () => {
      // 先發送一個通知
      const testNotification = {
        title: '測試',
        body: '測試內容',
        data: { type: 'test' }
      };
      
      // 模擬標記為已讀
      const history = NotificationService.getNotificationHistory();
      if (history.length > 0) {
        const firstNotification = history[0];
        NotificationService.markAsRead(firstNotification.id);
        
        const updatedHistory = NotificationService.getNotificationHistory();
        const updatedNotification = updatedHistory.find(n => n.id === firstNotification.id);
        
        expect(updatedNotification?.read).toBe(true);
      }
    });

    test('應該能夠清除通知歷史', () => {
      NotificationService.clearHistory();
      
      const history = NotificationService.getNotificationHistory();
      expect(history).toHaveLength(0);
    });
  });

  describe('設置功能測試', () => {
    test('應該能夠保存和載入應用設置', () => {
      const testSettings = {
        theme: 'dark' as const,
        language: 'en-US' as const,
        autoSync: false,
        dataRetention: 180,
        privacyMode: true
      };
      
      // 保存設置
      localStorage.setItem('app_settings', JSON.stringify(testSettings));
      
      // 載入設置
      const savedSettings = localStorage.getItem('app_settings');
      const loadedSettings = savedSettings ? JSON.parse(savedSettings) : null;
      
      expect(loadedSettings).toEqual(testSettings);
    });

    test('應該能夠處理主題設置', () => {
      const themes = ['light', 'dark', 'system'];
      
      themes.forEach(theme => {
        expect(themes).toContain(theme);
      });
    });

    test('應該能夠處理語言設置', () => {
      const languages = ['zh-TW', 'en-US'];
      
      languages.forEach(lang => {
        expect(languages).toContain(lang);
      });
    });

    test('應該能夠處理數據保留期限', () => {
      const retentionPeriods = [30, 90, 180, 365, 0];
      
      retentionPeriods.forEach(period => {
        expect(retentionPeriods).toContain(period);
      });
    });
  });

  describe('圖表組件測試', () => {
    test('應該能夠渲染圖表組件', () => {
      // 這裡測試圖表組件的基本渲染
      expect(true).toBe(true);
    });

    test('應該能夠處理圖表數據更新', () => {
      // 這裡測試圖表數據更新邏輯
      expect(true).toBe(true);
    });

    test('應該能夠處理圖表交互', () => {
      // 這裡測試圖表交互功能
      expect(true).toBe(true);
    });
  });

  describe('通知頁面測試', () => {
    test('應該能夠顯示通知列表', () => {
      // 這裡測試通知頁面的顯示邏輯
      expect(true).toBe(true);
    });

    test('應該能夠處理通知操作', () => {
      // 這裡測試通知操作功能
      expect(true).toBe(true);
    });

    test('應該能夠發送測試通知', () => {
      // 這裡測試測試通知功能
      expect(true).toBe(true);
    });
  });

  describe('設置頁面測試', () => {
    test('應該能夠顯示設置選項', () => {
      // 這裡測試設置頁面的顯示邏輯
      expect(true).toBe(true);
    });

    test('應該能夠保存設置更改', () => {
      // 這裡測試設置保存功能
      expect(true).toBe(true);
    });

    test('應該能夠處理設置驗證', () => {
      // 這裡測試設置驗證邏輯
      expect(true).toBe(true);
    });
  });
});
